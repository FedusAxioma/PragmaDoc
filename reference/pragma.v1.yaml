info:
  title: pragma
  version: '1.0'
  description: All endpoints for Pragma project.
paths:
  /panel-users:
    get:
      summary: List Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PanelUser'
              examples: {}
            application/xml:
              schema:
                type: object
                properties:
                  '':
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Fails due to wrong field type:
                  value:
                    statusCode: 400
                    error: Bad Request
                    message: 'child "query" fails because [child "limit" fails because ["limit" must be a number]]'
      operationId: get-panel-users
      description: Only allowed for ADMIN role.
      parameters:
        - schema:
            type: integer
            minimum: 1
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: orderByField
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: orderByDirection
      tags:
        - panel-users
    post:
      summary: Create User
      operationId: post-panel-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                description: Id for new user
              examples:
                New user created:
                  value: 18
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Error 400 due to required fields:
                  value:
                    statusCode: 400
                    error: Bad Request
                    message: 'child "body" fails because [child "username" fails because ["username" is required]]'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
      description: Only allowed for ADMIN role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PanelUser'
        description: ''
      tags:
        - panel-users
    parameters: []
  /panel-users/scopes:
    get:
      summary: List Scopes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                enum:
                  - ADMIN
                  - EDITOR
                  - MARKETING
                  - ORGANIZATION
                  - THERAPIST
                  - PACIENT
                items:
                  $ref: '#/components/schemas/Scope'
              examples:
                List successfully all scopes:
                  value:
                    - id: 1
                      name: ADMIN
                    - id: 2
                      name: MARKETING
      operationId: get-panel-users-scopes
      description: Only allowed for ADMIN role.
      tags:
        - panel-users
    parameters: []
  /users/login:
    post:
      summary: Login
      operationId: post-users-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  expiresIn:
                    type: integer
                  refreshToken:
                    type: string
                  tokenType:
                    type: string
                    enum:
                      - Bearer
              examples:
                Login successfull:
                  value:
                    accessToken: 795c92371766923d46e24fa276df64f2b3e5317f
                    expiresIn: 3599
                    refreshToken: d50e10d775f36b439b899f9cefa4e762ce0f933b
                    tokenType: Bearer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Wrong User or Password:
                  value:
                    statusCode: 400
                    error: Bad Request
                    message: 'Invalid client: client is invalid'
      description: No restriction.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                client_secret:
                  type: string
                grant_type:
                  type: string
                  enum:
                    - facebook
                    - google
                    - password
                accessToken:
                  type: string
                  description: 'If grant_type === facebook, then this field is required!'
                idToken:
                  type: string
                  description: 'If grant_type === google, then this field is required!'
                password:
                  type: string
                  description: 'If grant_type === password, then this field is required!'
                  minLength: 32
                  maxLength: 32
                username:
                  type: string
                  description: 'If grant_type === password, then this field is required!'
                  format: email
              required:
                - client_id
                - client_secret
                - grant_type
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
      tags:
        - users
    parameters: []
  '/panel-users/{id}':
    get:
      summary: Retrieve panel user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PanelUser'
              examples: {}
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
      operationId: 'get-panel-users-:id'
      description: Only allowed for ADMIN role.
      tags:
        - panel-users
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    put:
      summary: Update panel user
      operationId: 'put-panel-users-:id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: Number of rows updated
              examples: {}
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
      description: Only allowed for ADMIN role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PanelUser'
      tags:
        - panel-users
  /panel-users/current:
    get:
      summary: Get my panel user info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PanelUser'
              examples: {}
      operationId: get-panel-users-current
      description: No restriction.
      tags:
        - panel-users
    parameters: []
  /users/logout:
    post:
      summary: Logout
      operationId: post-users-logout
      responses:
        '200':
          description: OK
      description: No restriction.
      tags:
        - users
    parameters: []
  /users/change-password:
    put:
      summary: Change password
      operationId: put-users-change-password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
              examples:
                Password changed:
                  value: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: No restriction.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  minLength: 32
                  maxLength: 32
                oldPassword:
                  type: string
                  minLength: 32
                  maxLength: 32
              required:
                - password
                - oldPassword
      tags:
        - users
    parameters: []
  /users/forgot-password:
    put:
      summary: Forgot password
      operationId: put-users-forgot-password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
              examples: {}
      tags:
        - users
      description: No restriction.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: email
              required:
                - username
        description: ''
  /blog-posts:
    get:
      summary: List Posts
      tags:
        - blog-posts
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-blog-posts
      description: Only allowed for EDITOR or ADMIN roles.
      parameters:
        - schema:
            type: integer
            minimum: 1
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: orderByField
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: orderByDirection
    post:
      summary: Create Post
      operationId: post-blog-posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: number
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - blog-posts
      description: Only allowed for EDITOR or ADMIN roles.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
  '/blog-posts/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    get:
      summary: Retrieve post
      tags:
        - blog-posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-blog-posts-id
      description: Only allowed for EDITOR or ADMIN roles.
    put:
      summary: Update post
      operationId: put-blog-posts-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - blog-posts
      description: Only allowed for EDITOR or ADMIN roles.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
  /items:
    get:
      summary: List items
      tags:
        - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-items
      description: Only allowed for ADMIN role.
      parameters:
        - schema:
            type: integer
            minimum: 1
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: orderByField
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: orderByDirection
  '/items/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    get:
      summary: Retrieve item
      tags:
        - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-items-id
      description: Only allowed for ADMIN role.
    put:
      summary: Update item
      operationId: put-items-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - items
      description: Only allowed for ADMIN role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
  /items/public:
    get:
      summary: List items with public info
      tags:
        - items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPublic'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-items-public
      description: No restriction.
  /blog-posts/public:
    get:
      summary: List public blog posts
      tags:
        - blog-posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPostPublic'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-blog-posts-public
      description: No restrictions.
  /prices:
    get:
      summary: List prices
      tags:
        - prices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-prices
      description: No restrictions.
  '/prices/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    get:
      summary: Retrieve price
      tags:
        - prices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-prices-id
      description: No restrictions.
    put:
      summary: Update price
      operationId: put-prices-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - prices
      description: Only allowed for ADMIN role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Price'
        description: ''
  /folders:
    get:
      summary: List all folders
      tags:
        - folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-folders
      description: Allowed only for ADMIN and EDITOR roles.
      parameters:
        - schema:
            type: string
            enum:
              - resource
              - form
          in: query
          name: type
        - schema:
            type: string
          in: query
          name: orderByField
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: orderByDirection
    post:
      summary: Create folder
      operationId: post-folders
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Allowed only for ADMIN and EDITOR roles.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
        description: ''
      tags:
        - folders
  '/folders/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    get:
      summary: Retrieve specific folder
      tags:
        - folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-folders-id
      description: Allowed only for ADMIN and EDITOR roles.
    put:
      summary: Edit folder
      operationId: put-folders-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Allowed only for ADMIN and EDITOR roles.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
      tags:
        - folders
  /folders/public:
    get:
      summary: Get public folders
      tags:
        - folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-folders-public
      description: No restrictions.
      parameters:
        - schema:
            type: string
            enum:
              - resource
              - form
          in: query
          name: type
        - schema:
            type: string
          in: query
          name: orderByField
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: orderByDirection
  /resources:
    get:
      summary: List all resources
      tags:
        - resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-resources
      description: Allowed only for ADMIN and EDITOR roles.
      parameters:
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: orderByDirection
        - schema:
            type: string
          in: query
          name: orderByField
    post:
      summary: Create resource
      operationId: post-resources
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Allowed only for ADMIN and EDITOR roles.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        description: ''
      tags:
        - resources
  '/folders/{id}/resources':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    get:
      summary: List all resources for specific folder
      tags:
        - folders
        - resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-folders-id-resources
      description: Allowed only for ADMIN and EDITOR roles.
      parameters:
        - schema:
            type: string
          in: query
          name: orderByField
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: orderByDirection
  '/folders/{id}/resources/public':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    get:
      summary: List all public resources for specific folder
      tags:
        - folders
        - resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-folders-id-resources-public
      description: No restriction.
      parameters:
        - schema:
            type: string
          in: query
          name: orderByField
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: orderByDirection
  '/resourcers/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    get:
      summary: Retrieve specific resource
      tags:
        - resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-resourcers-id
      description: Allowed only for ADMIN and EDITOR roles.
    put:
      summary: Edit resource
      operationId: put-resourcers-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - resources
      description: Allowed only for ADMIN and EDITOR roles.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        description: ''
  '/files/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    get:
      summary: Get specific file
      tags:
        - files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FIle'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-files-id
      description: Allowed only depending on roles and file type.
  /panel-users/current/files:
    post:
      summary: Create new profile picture
      operationId: post-panel-users-current-files
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                minimum: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - panel-users
      description: Only allowed for own user.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      parameters: []
    put:
      summary: Update profile picture relation
      operationId: put-panel-users-current-files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - panel-users
      description: Only allowed for own user.
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              minimum: 1
  '/blog-posts/{id}/files':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    post:
      summary: Create new post picture
      operationId: post-blog-posts-id-files
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                minimum: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Only allowed for ADMIN or EDITOR roles.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
      tags:
        - blog-posts
    put:
      summary: Update post picture
      operationId: put-blog-posts-id-files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
      tags:
        - blog-posts
      description: Only allowed for ADMIN or EDITOR roles.
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              minimum: 1
  '/resources/{id}/files/':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
    post:
      summary: Create new resource
      operationId: post-resources-id-files
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                minimum: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Only allowed for ADMIN and EDITOR roles.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
      tags:
        - resources
    put:
      summary: Update resource files
      operationId: put-resources-id-files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Only allowed for ADMIN and EDITOR roles.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
        description: ''
      tags:
        - resources
components:
  schemas:
    User:
      title: User
      type: object
      description: User model with all related information.
      x-tags:
        - models
      properties:
        id:
          type: integer
          minimum: 1
        username:
          type: string
          format: email
        password:
          type: string
          minLength: 32
          maxLength: 32
        scope:
          $ref: '#/components/schemas/Scope'
        isDisabled:
          type: boolean
        alreadyLogged:
          type: boolean
      required:
        - username
        - scope
        - isDisabled
        - alreadyLogged
      x-examples: {}
    Error:
      title: Error
      type: object
      x-examples:
        Error 400:
          statusCode: 400
          error: Bad Request
          message: 'child "body" fails because [child "beginDate" fails because ["beginDate" is required]]'
        Error 409:
          statudCode: 409
          error: Conflict
          internalCode: 1400
          message: The user exists already
      description: Error model received from API calls
      properties:
        statusCode:
          type: integer
          enum:
            - 400
            - 401
            - 403
        error:
          type: string
        message:
          type: string
        internalCode:
          type: integer
      required:
        - statusCode
        - error
        - message
      x-tags:
        - models
    Scope:
      title: Scope
      type: object
      x-examples:
        Scope for ADMIN:
          id: 2
          name: ADMIN
          description: Here is a description for this role
      description: Scope model for user permissions
      x-tags:
        - models
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name
        - description
    PanelUser:
      title: PanelUser
      type: object
      description: 'Panel user model, used for administration panel users with ADMIN, EDITOR or MARKETING scopes.'
      x-examples:
        User without a picture:
          id: 2
          name: My Name
          imageId: 3
          user:
            id: 2
            username: john.doe2
            password: ''
            scope:
              id: 2
              name: ADMIN
              description: Here is a description for this role
            enabled: true
            alreadyLogged: false
      x-tags:
        - models
      properties:
        id:
          type: integer
        name:
          type: string
        imageId:
          type: integer
          minimum: 1
        user:
          $ref: '#/components/schemas/User'
      required:
        - name
    BlogPost:
      title: BlogPost
      type: object
      description: Blog post model for public Blog.
      x-tags:
        - models
      x-examples:
        New Blog Post:
          id: 1
          title: This is a new post
          description: Here there is a description with all information to be shown.
          isDisabled: false
          imageId: 2
          author:
            id: 2
            name: My Name
            picture: ''
            user:
              id: 2
              username: john.doe2
              password: ''
              scope:
                id: 2
                name: ADMIN
                description: Here is a description for this role
              enabled: true
              alreadyLogged: false
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
        description:
          type: string
        author:
          $ref: '#/components/schemas/PanelUser'
        isDisabled:
          type: boolean
        imageId:
          type: integer
          minimum: 1
      required:
        - title
        - description
        - author
        - isDisabled
    Item:
      title: Item
      type: object
      description: "Item model created for all small information that changes dynamically in the web, but that doesn't make sense to have a specific CRUD for."
      x-examples:
        Terms and Conditions:
          id: 1
          key: terms_and_conditions
          value: This are the terms and conditions to show.
          allowEdition: true
      x-tags:
        - models
      properties:
        id:
          type: number
          minimum: 1
        key:
          type: string
          minLength: 1
          maxLength: 100
        value:
          type: string
        allowEdition:
          type: boolean
      required:
        - key
        - value
        - allowEdition
    ItemPublic:
      type: object
      x-tags:
        - models
      x-examples:
        Terms and Conditions:
          id: 1
          key: terms_and_conditions
          value: This are the terms and conditions to show.
      description: ItemPublic model with information for public sites. It only shows public information from Item model.
      properties:
        id:
          type: number
          minimum: 1
        value:
          type: string
        key:
          type: string
          minLength: 1
          maxLength: 100
      required:
        - value
        - key
    BlogPostPublic:
      title: BlogPostPublic
      type: object
      x-examples:
        New Blog Post:
          id: 1
          title: This is a new post
          description: Here there is a description with all information to be shown.
          imageId: 3
      x-tags:
        - models
      description: Blog post model for public Blog.
      properties:
        id:
          type: integer
          minimum: 1
        description:
          type: string
        title:
          type: string
        imageId:
          type: integer
          minimum: 1
      required:
        - description
        - title
    Price:
      title: Price
      type: object
      x-examples:
        Promoción para 10 Pacientes en Pesos Argentinos:
          id: 1
          key: 10_pacientes_arg
          value: 1999.99
          type: ARS
          isDisabled: false
      x-tags:
        - models
      properties:
        id:
          type: integer
          minimum: 1
        key:
          type: string
          maxLength: 50
        value:
          type: number
        type:
          type: string
          enum:
            - ARS
            - USD
        isDisabled:
          type: boolean
      required:
        - key
        - value
        - type
        - isDisabled
      description: 'Price model that is used to show prices in public web, but also to keep number on annual income.'
    Folder:
      title: Folder
      type: object
      description: 'Folder model used for resources and forms. It can have a parentFolder, or null in case it is at a root level'
      x-examples:
        Root Resource folder:
          id: 1
          title: Adictions
          description: All adiction resources here
          type: resource
          parentFolder: null
          isDisabled: false
        Non-route Resource folder:
          id: 2
          title: Alcoholism
          description: All related to alcoholism
          type: resource
          isDisabled: false
          parentFolder:
            id: 1
            title: Adictions
            description: All adiction resources here
            type: resource
            parentFolder: null
      x-tags:
        - models
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
        description:
          type: string
        parentFolder:
          $ref: '#/components/schemas/Folder'
        type:
          type: string
          enum:
            - resource
            - form
        isDisabled:
          type: boolean
      required:
        - title
        - type
        - isDisabled
    Resource:
      title: Resource
      type: object
      description: Resource model for therapists files
      x-tags:
        - models
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
        description:
          type: string
        instructions:
          type: string
        references:
          type: string
        imagesIds:
          type: array
          items:
            type: integer
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        isDisabled:
          type: boolean
        folder:
          $ref: '#/components/schemas/Folder'
      required:
        - title
        - imagesIds
        - isDisabled
    Tag:
      title: Tag
      type: object
      description: Tag model used for resources and forms
      properties:
        id:
          type: integer
          minimum: 1
        key:
          type: string
      required:
        - key
      x-examples:
        Tag example:
          id: 1
          key: adiction
      x-tags:
        - models
    FIle:
      title: FIle
      type: object
      description: File model used for images or PDFs
      x-tags:
        - models
      properties:
        id:
          type: integer
          minimum: 1
        url:
          type: string
        type:
          type: string
          enum:
            - PROFILE
            - POST
            - RESOURCE
      required:
        - url
  securitySchemes: {}
servers:
  - url: 'http://localhost:3000/api'
openapi: 3.0.0
